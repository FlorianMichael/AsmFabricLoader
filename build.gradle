plugins {
    id "maven-publish"
    id "signing"
    id "fabric-loom" version "1.7-SNAPSHOT"
}

base {
    archivesName = project.maven_name
}

repositories {
    mavenCentral()

    maven {
        name = "Lenni0451"
        url = "https://maven.lenni0451.net/everything"
    }
}

configurations {
    jij // jar in jar configuration
}

dependencies {
    jij "net.fabricmc:tiny-mappings-parser:${project.tiny_mappings_parser_version}"
    jij "net.lenni0451:Reflect:${project.reflect_version}"
    jij("net.lenni0451.classtransform:core:${project.classtransform_version}") {
        exclude module: "asm"
        exclude module: "asm-commons"
        exclude module: "asm-tree"
    }

    // Fabric's jar in jar system doesn't support transitive dependencies, so we have to manually add them
    afterEvaluate {
        configurations.jij.incoming.resolutionResult.allDependencies {
            dependencies.include(dependencies.implementation(dependencies.compileOnlyApi(requested.toString())))
        }
    }
}

allprojects {
    apply plugin: "fabric-loom"

    base {
        version = project.maven_version
        group = project.maven_group
    }

    configurations {
        jis // jar in jar sources configuration
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        jis mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    java {
        withSourcesJar()
        withJavadocJar()

        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
}

jar {
    // "jis" contains the mappings.jar file, this hacky code renames its mappings.tiny file to afl_mappings.tiny to avoid conflicts
    dependsOn configurations.jis
    File mappingsFile = zipTree(configurations.jis.singleFile).matching { include "mappings/mappings.tiny" }.singleFile
    from(mappingsFile) {
        rename {
            "afl_mappings.tiny"
        }
    }
    // Rename the project's license file to LICENSE_<project_name> to avoid conflicts
    from("LICENSE") {
        rename {
            "${it}_${project.maven_name}"
        }
    }
}

publishing {
    repositories {
        maven {
            name = "reposilite"
            url = "https://maven.lenni0451.net/" + (project.version.endsWith("SNAPSHOT") ? "snapshots" : "releases")

            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
        maven {
            name = "ossrh"
            def releasesUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = project.version.endsWith("SNAPSHOT") ? snapshotsUrl : releasesUrl

            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifactId = project.archivesBaseName
            groupId = project.group
            version = project.version

            from components.java

            pom {
                name = artifactId
                description = "A series of cursed Fabric hacks and utilities which break everything."
                url = "https://github.com/FlorianMichael/AsmFabricLoader"
                licenses {
                    license {
                        name = "Apache-2.0 license"
                        url = "https://github.com/FlorianMichael/AsmFabricLoader/blob/main/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "FlorianMichael"
                        name = "EnZaXD"
                        email = "florian.michael07@gmail.com"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/FlorianMichael/AsmFabricLoader.git"
                    developerConnection = "scm:git:ssh://github.com/FlorianMichael/AsmFabricLoader.git"
                    url = "github.com/FlorianMichael/AsmFabricLoader"
                }
            }
        }
    }
}

signing {
    setRequired false
    sign configurations.archives
    sign publishing.publications.maven
}

project.tasks.withType(PublishToMavenRepository).forEach {
    it.dependsOn(project.tasks.withType(Sign))
}